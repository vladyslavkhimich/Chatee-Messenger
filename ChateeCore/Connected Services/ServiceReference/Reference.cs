//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChateeCore.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService", CallbackContract=typeof(ChateeCore.ServiceReference.IServiceCallback))]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Connect", ReplyAction="http://tempuri.org/IService/ConnectResponse")]
        string Connect();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Connect", ReplyAction="http://tempuri.org/IService/ConnectResponse")]
        System.Threading.Tasks.Task<string> ConnectAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/LoginOnServer", ReplyAction="http://tempuri.org/IService/LoginOnServerResponse")]
        void LoginOnServer(WCF_Server.DataContracts.UserContract connectedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/LoginOnServer", ReplyAction="http://tempuri.org/IService/LoginOnServerResponse")]
        System.Threading.Tasks.Task LoginOnServerAsync(WCF_Server.DataContracts.UserContract connectedUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Register", ReplyAction="http://tempuri.org/IService/RegisterResponse")]
        bool Register(WCF_Server.DataContracts.UserContract userToRegister);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Register", ReplyAction="http://tempuri.org/IService/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(WCF_Server.DataContracts.UserContract userToRegister);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserByEmail", ReplyAction="http://tempuri.org/IService/GetUserByEmailResponse")]
        WCF_Server.DataContracts.UserContract GetUserByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserByEmail", ReplyAction="http://tempuri.org/IService/GetUserByEmailResponse")]
        System.Threading.Tasks.Task<WCF_Server.DataContracts.UserContract> GetUserByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserInterlocutors", ReplyAction="http://tempuri.org/IService/GetUserInterlocutorsResponse")]
        WCF_Server.DataContracts.UserContract[] GetUserInterlocutors(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserInterlocutors", ReplyAction="http://tempuri.org/IService/GetUserInterlocutorsResponse")]
        System.Threading.Tasks.Task<WCF_Server.DataContracts.UserContract[]> GetUserInterlocutorsAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUsersByUsername", ReplyAction="http://tempuri.org/IService/GetUsersByUsernameResponse")]
        WCF_Server.DataContracts.UserContract[] GetUsersByUsername(string usernameSubstring);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUsersByUsername", ReplyAction="http://tempuri.org/IService/GetUsersByUsernameResponse")]
        System.Threading.Tasks.Task<WCF_Server.DataContracts.UserContract[]> GetUsersByUsernameAsync(string usernameSubstring);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckEmailDatabaseExistence", ReplyAction="http://tempuri.org/IService/CheckEmailDatabaseExistenceResponse")]
        bool CheckEmailDatabaseExistence(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckEmailDatabaseExistence", ReplyAction="http://tempuri.org/IService/CheckEmailDatabaseExistenceResponse")]
        System.Threading.Tasks.Task<bool> CheckEmailDatabaseExistenceAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckUsernameDatabaseExistence", ReplyAction="http://tempuri.org/IService/CheckUsernameDatabaseExistenceResponse")]
        bool CheckUsernameDatabaseExistence(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckUsernameDatabaseExistence", ReplyAction="http://tempuri.org/IService/CheckUsernameDatabaseExistenceResponse")]
        System.Threading.Tasks.Task<bool> CheckUsernameDatabaseExistenceAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetNextUserID", ReplyAction="http://tempuri.org/IService/GetNextUserIDResponse")]
        int GetNextUserID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetNextUserID", ReplyAction="http://tempuri.org/IService/GetNextUserIDResponse")]
        System.Threading.Tasks.Task<int> GetNextUserIDAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ConnectCallback", ReplyAction="http://tempuri.org/IService/ConnectCallbackResponse")]
        void ConnectCallback(string testCallbackString);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : ChateeCore.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.DuplexClientBase<ChateeCore.ServiceReference.IService>, ChateeCore.ServiceReference.IService {
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string Connect() {
            return base.Channel.Connect();
        }
        
        public System.Threading.Tasks.Task<string> ConnectAsync() {
            return base.Channel.ConnectAsync();
        }
        
        public void LoginOnServer(WCF_Server.DataContracts.UserContract connectedUser) {
            base.Channel.LoginOnServer(connectedUser);
        }
        
        public System.Threading.Tasks.Task LoginOnServerAsync(WCF_Server.DataContracts.UserContract connectedUser) {
            return base.Channel.LoginOnServerAsync(connectedUser);
        }
        
        public bool Register(WCF_Server.DataContracts.UserContract userToRegister) {
            return base.Channel.Register(userToRegister);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(WCF_Server.DataContracts.UserContract userToRegister) {
            return base.Channel.RegisterAsync(userToRegister);
        }
        
        public WCF_Server.DataContracts.UserContract GetUserByEmail(string email) {
            return base.Channel.GetUserByEmail(email);
        }
        
        public System.Threading.Tasks.Task<WCF_Server.DataContracts.UserContract> GetUserByEmailAsync(string email) {
            return base.Channel.GetUserByEmailAsync(email);
        }
        
        public WCF_Server.DataContracts.UserContract[] GetUserInterlocutors(int userID) {
            return base.Channel.GetUserInterlocutors(userID);
        }
        
        public System.Threading.Tasks.Task<WCF_Server.DataContracts.UserContract[]> GetUserInterlocutorsAsync(int userID) {
            return base.Channel.GetUserInterlocutorsAsync(userID);
        }
        
        public WCF_Server.DataContracts.UserContract[] GetUsersByUsername(string usernameSubstring) {
            return base.Channel.GetUsersByUsername(usernameSubstring);
        }
        
        public System.Threading.Tasks.Task<WCF_Server.DataContracts.UserContract[]> GetUsersByUsernameAsync(string usernameSubstring) {
            return base.Channel.GetUsersByUsernameAsync(usernameSubstring);
        }
        
        public bool CheckEmailDatabaseExistence(string email) {
            return base.Channel.CheckEmailDatabaseExistence(email);
        }
        
        public System.Threading.Tasks.Task<bool> CheckEmailDatabaseExistenceAsync(string email) {
            return base.Channel.CheckEmailDatabaseExistenceAsync(email);
        }
        
        public bool CheckUsernameDatabaseExistence(string username) {
            return base.Channel.CheckUsernameDatabaseExistence(username);
        }
        
        public System.Threading.Tasks.Task<bool> CheckUsernameDatabaseExistenceAsync(string username) {
            return base.Channel.CheckUsernameDatabaseExistenceAsync(username);
        }
        
        public int GetNextUserID() {
            return base.Channel.GetNextUserID();
        }
        
        public System.Threading.Tasks.Task<int> GetNextUserIDAsync() {
            return base.Channel.GetNextUserIDAsync();
        }
    }
}
