//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChateeCore.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService", CallbackContract=typeof(ChateeCore.ServiceReference.IServiceCallback))]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Connect", ReplyAction="http://tempuri.org/IService/ConnectResponse")]
        string Connect();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Connect", ReplyAction="http://tempuri.org/IService/ConnectResponse")]
        System.Threading.Tasks.Task<string> ConnectAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/LoginOnServer", ReplyAction="http://tempuri.org/IService/LoginOnServerResponse")]
        void LoginOnServer(WCF_Server.DataContracts.UserContract connectedUser, int userServerDatabaseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/LoginOnServer", ReplyAction="http://tempuri.org/IService/LoginOnServerResponse")]
        System.Threading.Tasks.Task LoginOnServerAsync(WCF_Server.DataContracts.UserContract connectedUser, int userServerDatabaseID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Disconnect", ReplyAction="http://tempuri.org/IService/DisconnectResponse")]
        void Disconnect(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Disconnect", ReplyAction="http://tempuri.org/IService/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Register", ReplyAction="http://tempuri.org/IService/RegisterResponse")]
        bool Register(WCF_Server.DataContracts.UserContract userToRegister);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Register", ReplyAction="http://tempuri.org/IService/RegisterResponse")]
        System.Threading.Tasks.Task<bool> RegisterAsync(WCF_Server.DataContracts.UserContract userToRegister);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserByEmail", ReplyAction="http://tempuri.org/IService/GetUserByEmailResponse")]
        WCF_Server.DataContracts.UserContract GetUserByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserByEmail", ReplyAction="http://tempuri.org/IService/GetUserByEmailResponse")]
        System.Threading.Tasks.Task<WCF_Server.DataContracts.UserContract> GetUserByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserInterlocutors", ReplyAction="http://tempuri.org/IService/GetUserInterlocutorsResponse")]
        WCF_Server.DataContracts.UserContract[] GetUserInterlocutors(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserInterlocutors", ReplyAction="http://tempuri.org/IService/GetUserInterlocutorsResponse")]
        System.Threading.Tasks.Task<WCF_Server.DataContracts.UserContract[]> GetUserInterlocutorsAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUsersByUsername", ReplyAction="http://tempuri.org/IService/GetUsersByUsernameResponse")]
        WCF_Server.DataContracts.UserContract[] GetUsersByUsername(string usernameSubstring);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUsersByUsername", ReplyAction="http://tempuri.org/IService/GetUsersByUsernameResponse")]
        System.Threading.Tasks.Task<WCF_Server.DataContracts.UserContract[]> GetUsersByUsernameAsync(string usernameSubstring);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckEmailDatabaseExistence", ReplyAction="http://tempuri.org/IService/CheckEmailDatabaseExistenceResponse")]
        bool CheckEmailDatabaseExistence(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckEmailDatabaseExistence", ReplyAction="http://tempuri.org/IService/CheckEmailDatabaseExistenceResponse")]
        System.Threading.Tasks.Task<bool> CheckEmailDatabaseExistenceAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckUsernameDatabaseExistence", ReplyAction="http://tempuri.org/IService/CheckUsernameDatabaseExistenceResponse")]
        bool CheckUsernameDatabaseExistence(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckUsernameDatabaseExistence", ReplyAction="http://tempuri.org/IService/CheckUsernameDatabaseExistenceResponse")]
        System.Threading.Tasks.Task<bool> CheckUsernameDatabaseExistenceAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetNextUserID", ReplyAction="http://tempuri.org/IService/GetNextUserIDResponse")]
        int GetNextUserID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetNextUserID", ReplyAction="http://tempuri.org/IService/GetNextUserIDResponse")]
        System.Threading.Tasks.Task<int> GetNextUserIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetNextChatID", ReplyAction="http://tempuri.org/IService/GetNextChatIDResponse")]
        int GetNextChatID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetNextChatID", ReplyAction="http://tempuri.org/IService/GetNextChatIDResponse")]
        System.Threading.Tasks.Task<int> GetNextChatIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetNextMessageID", ReplyAction="http://tempuri.org/IService/GetNextMessageIDResponse")]
        int GetNextMessageID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetNextMessageID", ReplyAction="http://tempuri.org/IService/GetNextMessageIDResponse")]
        System.Threading.Tasks.Task<int> GetNextMessageIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetMessageReadTime", ReplyAction="http://tempuri.org/IService/SetMessageReadTimeResponse")]
        void SetMessageReadTime(int messageID, System.DateTime messageReadTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetMessageReadTime", ReplyAction="http://tempuri.org/IService/SetMessageReadTimeResponse")]
        System.Threading.Tasks.Task SetMessageReadTimeAsync(int messageID, System.DateTime messageReadTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangeUserName", ReplyAction="http://tempuri.org/IService/ChangeUserNameResponse")]
        bool ChangeUserName(int userID, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangeUserName", ReplyAction="http://tempuri.org/IService/ChangeUserNameResponse")]
        System.Threading.Tasks.Task<bool> ChangeUserNameAsync(int userID, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangeUserEmail", ReplyAction="http://tempuri.org/IService/ChangeUserEmailResponse")]
        bool ChangeUserEmail(int userID, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangeUserEmail", ReplyAction="http://tempuri.org/IService/ChangeUserEmailResponse")]
        System.Threading.Tasks.Task<bool> ChangeUserEmailAsync(int userID, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangeUserPassword", ReplyAction="http://tempuri.org/IService/ChangeUserPasswordResponse")]
        bool ChangeUserPassword(int userID, byte[] passwordHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangeUserPassword", ReplyAction="http://tempuri.org/IService/ChangeUserPasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangeUserPasswordAsync(int userID, byte[] passwordHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangeUserUsername", ReplyAction="http://tempuri.org/IService/ChangeUserUsernameResponse")]
        bool ChangeUserUsername(int userID, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangeUserUsername", ReplyAction="http://tempuri.org/IService/ChangeUserUsernameResponse")]
        System.Threading.Tasks.Task<bool> ChangeUserUsernameAsync(int userID, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangeUserBio", ReplyAction="http://tempuri.org/IService/ChangeUserBioResponse")]
        bool ChangeUserBio(int userID, string bio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangeUserBio", ReplyAction="http://tempuri.org/IService/ChangeUserBioResponse")]
        System.Threading.Tasks.Task<bool> ChangeUserBioAsync(int userID, string bio);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangeUserAvatar", ReplyAction="http://tempuri.org/IService/ChangeUserAvatarResponse")]
        bool ChangeUserAvatar(int userID, byte[] avatar, string avatarCheckSum, string avatarName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ChangeUserAvatar", ReplyAction="http://tempuri.org/IService/ChangeUserAvatarResponse")]
        System.Threading.Tasks.Task<bool> ChangeUserAvatarAsync(int userID, byte[] avatar, string avatarCheckSum, string avatarName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendMessage", ReplyAction="http://tempuri.org/IService/SendMessageResponse")]
        bool SendMessage(int sentByUserID, int sentToUserID, WCF_Server.DataContracts.MessageContract messageContract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendMessage", ReplyAction="http://tempuri.org/IService/SendMessageResponse")]
        System.Threading.Tasks.Task<bool> SendMessageAsync(int sentByUserID, int sentToUserID, WCF_Server.DataContracts.MessageContract messageContract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/IsServerHasChat", ReplyAction="http://tempuri.org/IService/IsServerHasChatResponse")]
        bool IsServerHasChat(int userID1, int userID2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/IsServerHasChat", ReplyAction="http://tempuri.org/IService/IsServerHasChatResponse")]
        System.Threading.Tasks.Task<bool> IsServerHasChatAsync(int userID1, int userID2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateChat", ReplyAction="http://tempuri.org/IService/CreateChatResponse")]
        bool CreateChat(int userID1, int userID2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateChat", ReplyAction="http://tempuri.org/IService/CreateChatResponse")]
        System.Threading.Tasks.Task<bool> CreateChatAsync(int userID1, int userID2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserByID", ReplyAction="http://tempuri.org/IService/GetUserByIDResponse")]
        WCF_Server.DataContracts.UserContract GetUserByID(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserByID", ReplyAction="http://tempuri.org/IService/GetUserByIDResponse")]
        System.Threading.Tasks.Task<WCF_Server.DataContracts.UserContract> GetUserByIDAsync(int userID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/ReceiveMessage")]
        void ReceiveMessage(WCF_Server.DataContracts.MessageContract Message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : ChateeCore.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.DuplexClientBase<ChateeCore.ServiceReference.IService>, ChateeCore.ServiceReference.IService {
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string Connect() {
            return base.Channel.Connect();
        }
        
        public System.Threading.Tasks.Task<string> ConnectAsync() {
            return base.Channel.ConnectAsync();
        }
        
        public void LoginOnServer(WCF_Server.DataContracts.UserContract connectedUser, int userServerDatabaseID) {
            base.Channel.LoginOnServer(connectedUser, userServerDatabaseID);
        }
        
        public System.Threading.Tasks.Task LoginOnServerAsync(WCF_Server.DataContracts.UserContract connectedUser, int userServerDatabaseID) {
            return base.Channel.LoginOnServerAsync(connectedUser, userServerDatabaseID);
        }
        
        public void Disconnect(int userID) {
            base.Channel.Disconnect(userID);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int userID) {
            return base.Channel.DisconnectAsync(userID);
        }
        
        public bool Register(WCF_Server.DataContracts.UserContract userToRegister) {
            return base.Channel.Register(userToRegister);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterAsync(WCF_Server.DataContracts.UserContract userToRegister) {
            return base.Channel.RegisterAsync(userToRegister);
        }
        
        public WCF_Server.DataContracts.UserContract GetUserByEmail(string email) {
            return base.Channel.GetUserByEmail(email);
        }
        
        public System.Threading.Tasks.Task<WCF_Server.DataContracts.UserContract> GetUserByEmailAsync(string email) {
            return base.Channel.GetUserByEmailAsync(email);
        }
        
        public WCF_Server.DataContracts.UserContract[] GetUserInterlocutors(int userID) {
            return base.Channel.GetUserInterlocutors(userID);
        }
        
        public System.Threading.Tasks.Task<WCF_Server.DataContracts.UserContract[]> GetUserInterlocutorsAsync(int userID) {
            return base.Channel.GetUserInterlocutorsAsync(userID);
        }
        
        public WCF_Server.DataContracts.UserContract[] GetUsersByUsername(string usernameSubstring) {
            return base.Channel.GetUsersByUsername(usernameSubstring);
        }
        
        public System.Threading.Tasks.Task<WCF_Server.DataContracts.UserContract[]> GetUsersByUsernameAsync(string usernameSubstring) {
            return base.Channel.GetUsersByUsernameAsync(usernameSubstring);
        }
        
        public bool CheckEmailDatabaseExistence(string email) {
            return base.Channel.CheckEmailDatabaseExistence(email);
        }
        
        public System.Threading.Tasks.Task<bool> CheckEmailDatabaseExistenceAsync(string email) {
            return base.Channel.CheckEmailDatabaseExistenceAsync(email);
        }
        
        public bool CheckUsernameDatabaseExistence(string username) {
            return base.Channel.CheckUsernameDatabaseExistence(username);
        }
        
        public System.Threading.Tasks.Task<bool> CheckUsernameDatabaseExistenceAsync(string username) {
            return base.Channel.CheckUsernameDatabaseExistenceAsync(username);
        }
        
        public int GetNextUserID() {
            return base.Channel.GetNextUserID();
        }
        
        public System.Threading.Tasks.Task<int> GetNextUserIDAsync() {
            return base.Channel.GetNextUserIDAsync();
        }
        
        public int GetNextChatID() {
            return base.Channel.GetNextChatID();
        }
        
        public System.Threading.Tasks.Task<int> GetNextChatIDAsync() {
            return base.Channel.GetNextChatIDAsync();
        }
        
        public int GetNextMessageID() {
            return base.Channel.GetNextMessageID();
        }
        
        public System.Threading.Tasks.Task<int> GetNextMessageIDAsync() {
            return base.Channel.GetNextMessageIDAsync();
        }
        
        public void SetMessageReadTime(int messageID, System.DateTime messageReadTime) {
            base.Channel.SetMessageReadTime(messageID, messageReadTime);
        }
        
        public System.Threading.Tasks.Task SetMessageReadTimeAsync(int messageID, System.DateTime messageReadTime) {
            return base.Channel.SetMessageReadTimeAsync(messageID, messageReadTime);
        }
        
        public bool ChangeUserName(int userID, string name) {
            return base.Channel.ChangeUserName(userID, name);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeUserNameAsync(int userID, string name) {
            return base.Channel.ChangeUserNameAsync(userID, name);
        }
        
        public bool ChangeUserEmail(int userID, string email) {
            return base.Channel.ChangeUserEmail(userID, email);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeUserEmailAsync(int userID, string email) {
            return base.Channel.ChangeUserEmailAsync(userID, email);
        }
        
        public bool ChangeUserPassword(int userID, byte[] passwordHash) {
            return base.Channel.ChangeUserPassword(userID, passwordHash);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeUserPasswordAsync(int userID, byte[] passwordHash) {
            return base.Channel.ChangeUserPasswordAsync(userID, passwordHash);
        }
        
        public bool ChangeUserUsername(int userID, string username) {
            return base.Channel.ChangeUserUsername(userID, username);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeUserUsernameAsync(int userID, string username) {
            return base.Channel.ChangeUserUsernameAsync(userID, username);
        }
        
        public bool ChangeUserBio(int userID, string bio) {
            return base.Channel.ChangeUserBio(userID, bio);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeUserBioAsync(int userID, string bio) {
            return base.Channel.ChangeUserBioAsync(userID, bio);
        }
        
        public bool ChangeUserAvatar(int userID, byte[] avatar, string avatarCheckSum, string avatarName) {
            return base.Channel.ChangeUserAvatar(userID, avatar, avatarCheckSum, avatarName);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeUserAvatarAsync(int userID, byte[] avatar, string avatarCheckSum, string avatarName) {
            return base.Channel.ChangeUserAvatarAsync(userID, avatar, avatarCheckSum, avatarName);
        }
        
        public bool SendMessage(int sentByUserID, int sentToUserID, WCF_Server.DataContracts.MessageContract messageContract) {
            return base.Channel.SendMessage(sentByUserID, sentToUserID, messageContract);
        }
        
        public System.Threading.Tasks.Task<bool> SendMessageAsync(int sentByUserID, int sentToUserID, WCF_Server.DataContracts.MessageContract messageContract) {
            return base.Channel.SendMessageAsync(sentByUserID, sentToUserID, messageContract);
        }
        
        public bool IsServerHasChat(int userID1, int userID2) {
            return base.Channel.IsServerHasChat(userID1, userID2);
        }
        
        public System.Threading.Tasks.Task<bool> IsServerHasChatAsync(int userID1, int userID2) {
            return base.Channel.IsServerHasChatAsync(userID1, userID2);
        }
        
        public bool CreateChat(int userID1, int userID2) {
            return base.Channel.CreateChat(userID1, userID2);
        }
        
        public System.Threading.Tasks.Task<bool> CreateChatAsync(int userID1, int userID2) {
            return base.Channel.CreateChatAsync(userID1, userID2);
        }
        
        public WCF_Server.DataContracts.UserContract GetUserByID(int userID) {
            return base.Channel.GetUserByID(userID);
        }
        
        public System.Threading.Tasks.Task<WCF_Server.DataContracts.UserContract> GetUserByIDAsync(int userID) {
            return base.Channel.GetUserByIDAsync(userID);
        }
    }
}
